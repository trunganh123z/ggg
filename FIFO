class Queue:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return len(self.queue) == 0

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.queue.pop(0)
        else:
            raise IndexError("Queue is empty")

    def peek(self):
        if not self.is_empty():
            return self.queue[0]
        else:
            raise IndexError("Queue is empty")

    def size(self):
        return len(self.queue)


# Test the FIFO algorithm
if __name__ == "__main__":
    queue = Queue()

    # Enqueue elements into the queue
    queue.enqueue(1)
    queue.enqueue(2)
    queue.enqueue(3)
    queue.enqueue(4)

    # Dequeue elements from the queue
    print(queue.dequeue())  # Output: 1
    print(queue.dequeue())  # Output: 2

    # Peek the front element of the queue
    print(queue.peek())  # Output: 3

    # Check if the queue is empty
    print(queue.is_empty())  # Output: False

    # Get the size of the queue
    print(queue.size())  # Output: 2
