import java.util.*;

public class NRUAlgorithm {
    private final int CACHE_SIZE;
    private List<Integer> pages;
    private List<Integer> usageBits;

    public NRUAlgorithm(int capacity) {
        this.CACHE_SIZE = capacity;
        this.pages = new ArrayList<>();
        this.usageBits = new ArrayList<>();
    }

    public void addPage(int page) {
        if (!pages.contains(page)) {
            if (pages.size() >= CACHE_SIZE) {
                evictPage();
            }
            pages.add(page);
            usageBits.add(0);
        } else {
            int index = pages.indexOf(page);
            usageBits.set(index, 1);
        }
    }

    public void evictPage() {
        int minBit = Collections.min(usageBits);
        List<Integer> candidates = new ArrayList<>();
        for (int i = 0; i < usageBits.size(); i++) {
            if (usageBits.get(i) == minBit) {
                candidates.add(i);
            }
        }
        int evictIndex = candidates.get(0);
        int evictedPage = pages.remove(evictIndex);
        usageBits.remove(evictIndex);
        System.out.println("Evicted page: " + evictedPage);
    }

    public void displayCache() {
        System.out.println("Current Cache: " + pages);
        System.out.println("Usage Bits: " + usageBits);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the capacity of the NRU Cache: ");
        int capacity = scanner.nextInt();

        NRUAlgorithm nruCache = new NRUAlgorithm(capacity);

        System.out.println("Enter the pages (enter -1 to stop): ");
        int page;
        while ((page = scanner.nextInt()) != -1) {
            nruCache.addPage(page);
            nruCache.displayCache();
        }
    }
}
